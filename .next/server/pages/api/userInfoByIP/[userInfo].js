"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/userInfoByIP/[userInfo]";
exports.ids = ["pages/api/userInfoByIP/[userInfo]"];
exports.modules = {

/***/ "(api)/./pages/api/userInfoByIP/[userInfo].ts":
/*!**********************************************!*\
  !*** ./pages/api/userInfoByIP/[userInfo].ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    const HasZipCode = (obj)=>{\n        for (const x of obj){\n            const elem = x.address_components;\n            if (!isNaN(elem[elem.length - 1].long_name.replaceAll(\" \", \"\"))) {\n                return elem[elem.length - 1].long_name;\n            }\n        }\n        return \"00000\";\n    };\n    const getcoding = async (lat, lon)=>{\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=` + lat + `,` + lon + `&key=` + process.env.NEXT_PUBLIC_KEY_GOOGLE_API).then((res)=>res.json()).then((data)=>{\n            const result = data.results;\n            return HasZipCode(result);\n        // return data;\n        }).catch((err)=>{\n            console.error(\"When fetching data from google api : \\n\", err);\n            return \"00000\";\n        });\n    };\n    const geolocation = async (ip)=>{\n        return fetch(`http://ip-api.com/json/` + ip).then((res)=>res.json()).then(async (data)=>{\n            return {\n                zip: await getcoding(data.lat, data.lon),\n                country: data.country,\n                countryCode: data.countryCode,\n                region: data.region,\n                regionName: data.regionName,\n                city: data.city,\n                datetime: new Date().toLocaleString(\"en-US\", {\n                    timeZone: data.timezone\n                }),\n                lat: data.lat,\n                lon: data.lon,\n                timezone: data.timezone,\n                isp: data.isp,\n                org: data.org,\n                as: data.as,\n                query: data.query\n            };\n        }).catch((err)=>console.log(err));\n    };\n    const result = await geolocation(req.query.userInfo);\n    res.status(200).json(result);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvdXNlckluZm9CeUlQL1t1c2VySW5mb10udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLGVBQWVBLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUU7SUFDN0MsTUFBTUMsVUFBVSxHQUFHQyxDQUFBQSxHQUFHLEdBQUk7UUFDdkIsS0FBSyxNQUFNQyxDQUFDLElBQUlELEdBQUcsQ0FBRTtZQUNuQixNQUFNRSxJQUFJLEdBQUdELENBQUMsQ0FBQ0Usa0JBQWtCO1lBQ2pDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRixJQUFJLENBQUNBLElBQUksQ0FBQ0csTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDL0QsT0FBT0wsSUFBSSxDQUFDQSxJQUFJLENBQUNHLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQ0MsU0FBUyxDQUFDO2FBQ3hDO1NBQ0Y7UUFDRCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELE1BQU1FLFNBQVMsR0FBRyxPQUFPQyxHQUFXLEVBQUVDLEdBQVcsR0FBSztRQUNwRCxPQUFPQyxLQUFLLENBQ1YsQ0FBQyx5REFBeUQsQ0FBQyxHQUN6REYsR0FBRyxHQUNILENBQUMsQ0FBQyxDQUFDLEdBQ0hDLEdBQUcsR0FDSCxDQUFDLEtBQUssQ0FBQyxHQUNQRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsMEJBQTBCLENBQ3pDLENBQ0VDLElBQUksQ0FBQ2pCLENBQUFBLEdBQUcsR0FBSUEsR0FBRyxDQUFDa0IsSUFBSSxFQUFFLENBQUMsQ0FDdkJELElBQUksQ0FBQ0UsQ0FBQUEsSUFBSSxHQUFJO1lBQ1osTUFBTUMsTUFBTSxHQUFHRCxJQUFJLENBQUNFLE9BQU87WUFDM0IsT0FBT3BCLFVBQVUsQ0FBQ21CLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLGVBQWU7U0FDaEIsQ0FBQyxDQUNERSxLQUFLLENBQUNDLENBQUFBLEdBQUcsR0FBSTtZQUNaQyxPQUFPLENBQUNDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRUYsR0FBRyxDQUFDLENBQUM7WUFDOUQsT0FBTyxPQUFPLENBQUM7U0FDaEIsQ0FBQyxDQUFDO0tBQ047SUFDRCxNQUFNRyxXQUFXLEdBQUcsT0FBTUMsRUFBRSxHQUFJO1FBQzlCLE9BQU9kLEtBQUssQ0FBQyxDQUFDLHVCQUF1QixDQUFDLEdBQUdjLEVBQUUsQ0FBQyxDQUN6Q1YsSUFBSSxDQUFDakIsQ0FBQUEsR0FBRyxHQUFJQSxHQUFHLENBQUNrQixJQUFJLEVBQUUsQ0FBQyxDQUN2QkQsSUFBSSxDQUFDLE9BQU1FLElBQUksR0FBSTtZQUNsQixPQUFRO2dCQUNOUyxHQUFHLEVBQUUsTUFBTWxCLFNBQVMsQ0FBQ1MsSUFBSSxDQUFDUixHQUFHLEVBQUVRLElBQUksQ0FBQ1AsR0FBRyxDQUFDO2dCQUN4Q2lCLE9BQU8sRUFBRVYsSUFBSSxDQUFDVSxPQUFPO2dCQUNyQkMsV0FBVyxFQUFFWCxJQUFJLENBQUNXLFdBQVc7Z0JBQzdCQyxNQUFNLEVBQUVaLElBQUksQ0FBQ1ksTUFBTTtnQkFDbkJDLFVBQVUsRUFBRWIsSUFBSSxDQUFDYSxVQUFVO2dCQUMzQkMsSUFBSSxFQUFFZCxJQUFJLENBQUNjLElBQUk7Z0JBQ2ZDLFFBQVEsRUFBRSxJQUFJQyxJQUFJLEVBQUUsQ0FBQ0MsY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDM0NDLFFBQVEsRUFBRWxCLElBQUksQ0FBQ21CLFFBQVE7aUJBQ3hCLENBQUM7Z0JBQ0YzQixHQUFHLEVBQUVRLElBQUksQ0FBQ1IsR0FBRztnQkFDYkMsR0FBRyxFQUFFTyxJQUFJLENBQUNQLEdBQUc7Z0JBQ2IwQixRQUFRLEVBQUVuQixJQUFJLENBQUNtQixRQUFRO2dCQUN2QkMsR0FBRyxFQUFFcEIsSUFBSSxDQUFDb0IsR0FBRztnQkFDYkMsR0FBRyxFQUFFckIsSUFBSSxDQUFDcUIsR0FBRztnQkFDYkMsRUFBRSxFQUFFdEIsSUFBSSxDQUFDc0IsRUFBRTtnQkFDWEMsS0FBSyxFQUFFdkIsSUFBSSxDQUFDdUIsS0FBSzthQUNsQixDQUFDO1NBRUgsQ0FBQyxDQUNEcEIsS0FBSyxDQUFDQyxDQUFBQSxHQUFHLEdBQUlDLE9BQU8sQ0FBQ21CLEdBQUcsQ0FBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFDRCxNQUFNSCxNQUFNLEdBQUcsTUFBTU0sV0FBVyxDQUFDM0IsR0FBRyxDQUFDMkMsS0FBSyxDQUFDRSxRQUFRLENBQUM7SUFDckQ1QyxHQUFHLENBQUM2QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMzQixJQUFJLENBQUNFLE1BQU0sQ0FBQztDQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnNpdGUvLi9wYWdlcy9hcGkvdXNlckluZm9CeUlQL1t1c2VySW5mb10udHM/M2YxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICBjb25zdCBIYXNaaXBDb2RlID0gb2JqID0+IHtcbiAgICAgIGZvciAoY29uc3QgeCBvZiBvYmopIHtcbiAgICAgICAgY29uc3QgZWxlbSA9IHguYWRkcmVzc19jb21wb25lbnRzO1xuICAgICAgICBpZiAoIWlzTmFOKGVsZW1bZWxlbS5sZW5ndGggLSAxXS5sb25nX25hbWUucmVwbGFjZUFsbCgnICcsICcnKSkpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbVtlbGVtLmxlbmd0aCAtIDFdLmxvbmdfbmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFwiMDAwMDBcIjtcbiAgICB9O1xuICAgIGNvbnN0IGdldGNvZGluZyA9IGFzeW5jIChsYXQ6IHN0cmluZywgbG9uOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBmZXRjaChcbiAgICAgICAgYGh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9nZW9jb2RlL2pzb24/bGF0bG5nPWAgK1xuICAgICAgICAgIGxhdCArXG4gICAgICAgICAgYCxgICtcbiAgICAgICAgICBsb24gK1xuICAgICAgICAgIGAma2V5PWAgK1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tFWV9HT09HTEVfQVBJXG4gICAgICApXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgcmV0dXJuIEhhc1ppcENvZGUocmVzdWx0KTtcbiAgICAgICAgICAvLyByZXR1cm4gZGF0YTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIldoZW4gZmV0Y2hpbmcgZGF0YSBmcm9tIGdvb2dsZSBhcGkgOiBcXG5cIiwgZXJyKTtcbiAgICAgICAgICByZXR1cm4gXCIwMDAwMFwiO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdlb2xvY2F0aW9uID0gYXN5bmMgaXAgPT4ge1xuICAgICAgcmV0dXJuIGZldGNoKGBodHRwOi8vaXAtYXBpLmNvbS9qc29uL2AgKyBpcClcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgIC50aGVuKGFzeW5jIGRhdGEgPT4ge1xuICAgICAgICAgIHJldHVybiAge1xuICAgICAgICAgICAgemlwOiBhd2FpdCBnZXRjb2RpbmcoZGF0YS5sYXQsIGRhdGEubG9uKSxcbiAgICAgICAgICAgIGNvdW50cnk6IGRhdGEuY291bnRyeSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBkYXRhLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcmVnaW9uOiBkYXRhLnJlZ2lvbixcbiAgICAgICAgICAgIHJlZ2lvbk5hbWU6IGRhdGEucmVnaW9uTmFtZSxcbiAgICAgICAgICAgIGNpdHk6IGRhdGEuY2l0eSxcbiAgICAgICAgICAgIGRhdGV0aW1lOiBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge1xuICAgICAgICAgICAgICB0aW1lWm9uZTogZGF0YS50aW1lem9uZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbGF0OiBkYXRhLmxhdCxcbiAgICAgICAgICAgIGxvbjogZGF0YS5sb24sXG4gICAgICAgICAgICB0aW1lem9uZTogZGF0YS50aW1lem9uZSxcbiAgICAgICAgICAgIGlzcDogZGF0YS5pc3AsXG4gICAgICAgICAgICBvcmc6IGRhdGEub3JnLFxuICAgICAgICAgICAgYXM6IGRhdGEuYXMsXG4gICAgICAgICAgICBxdWVyeTogZGF0YS5xdWVyeSxcbiAgICAgICAgICB9O1xuICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gICAgfTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZW9sb2NhdGlvbihyZXEucXVlcnkudXNlckluZm8pO1xuICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KVxuICB9Il0sIm5hbWVzIjpbImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJIYXNaaXBDb2RlIiwib2JqIiwieCIsImVsZW0iLCJhZGRyZXNzX2NvbXBvbmVudHMiLCJpc05hTiIsImxlbmd0aCIsImxvbmdfbmFtZSIsInJlcGxhY2VBbGwiLCJnZXRjb2RpbmciLCJsYXQiLCJsb24iLCJmZXRjaCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19LRVlfR09PR0xFX0FQSSIsInRoZW4iLCJqc29uIiwiZGF0YSIsInJlc3VsdCIsInJlc3VsdHMiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImdlb2xvY2F0aW9uIiwiaXAiLCJ6aXAiLCJjb3VudHJ5IiwiY291bnRyeUNvZGUiLCJyZWdpb24iLCJyZWdpb25OYW1lIiwiY2l0eSIsImRhdGV0aW1lIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwidGltZVpvbmUiLCJ0aW1lem9uZSIsImlzcCIsIm9yZyIsImFzIiwicXVlcnkiLCJsb2ciLCJ1c2VySW5mbyIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/userInfoByIP/[userInfo].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/userInfoByIP/[userInfo].ts"));
module.exports = __webpack_exports__;

})();